/*
 *	serial.cpp	08-Oct-2007
 *	Dennis Terhorst <dennis.terhorst@rwth-aachen.de>
 */

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>

#include "serial.h"
#include "error.h"

#define DEBUG 0
#define DEBUG_STDERR 0

serial::serial()
{
		fd=-1;
		stat=NO_INIT;
}

	//
	// destructor
	//
serial::~serial() {
		if (tcsetattr(fd, TCSAFLUSH, &old_flags) != 0)
		{
			eperror("terminal: tcsetattr() failed");
		}
		close(fd);
		fd=-1;
		stat=NO_INIT;
	}

int serial::status() {
		return stat;
	}

int serial::getfd() {
		return fd;
	}

int serial::init() {
		eprintf("serial.init with open()\n");
		// pruefen existenz schnittstelle
		if ( (fd = open(TERM_DEVICE, O_RDWR | O_NOCTTY | O_NDELAY | O_NONBLOCK | O_APPEND)) == -1)
		{
			eperror("terminal: Can't open device " TERM_DEVICE);
			return(1);
		}
		//eprintf("geoeffnet...\n");
		//-----------------------------------------------------

		// Make the file descriptor asynchronous (the manual page says only 
		//            O_APPEND and O_NONBLOCK, will work with F_SETFL...) 
		if (fcntl(fd, F_SETFL, FASYNC | O_NONBLOCK) !=0 ) eprintf("could not SETFL\n");

		//eprintf("portpruefung ueberstanden...\n");
		/* RS232 konfigurieren */
		if (tcgetattr(fd, &term_attr) != 0)
		{
			eperror("terminal: tcgetattr() failed");
			return(1);
		}
		if (tcgetattr(fd, &old_flags) != 0)
		{
			eperror("terminal: tcgetattr() failed");
			return(1);
		}


		//eprintf("attribute gelesen...\n");

		term_attr.c_cflag = TERM_SPEED | CS8 | CREAD | CLOCAL;
		term_attr.c_iflag = IGNPAR;
		term_attr.c_oflag = 0;
		term_attr.c_lflag = 0;
		if (tcsetattr(fd, TCSAFLUSH, &term_attr) != 0)
		{
			eperror("terminal: tcsetattr() failed");
		}
		//eprintf("attribute gesetzt...\n");

		stat = OK;
		return stat;
	}

int serial::sendout(char* msg, int len) {
		//eprintf("serial.sendout(\"%s\",%d)\n", msg, len);
		if ( stat != OK ) return -1;
		if (0) {	// dont do this, might change message
			if (msg[len-1] == '\n' ) {
				msg[len] = 0;	
			} else {
				msg[len] = '\n';
				msg[len+1]= 0;
			}
			if (DEBUG) eprintf(">>> len %d %s", len, msg);
			if (DEBUG_STDERR) fprintf(stderr, ">>> len %d %s", len, msg);
		}
		return write(fd, msg, len);
	}

int serial::readin(char* msg, int maxlen) {
		int len;
		if ( stat != OK ) return -1;
		len = read(fd, msg, maxlen);
		if (msg[len-1] == '\n' ) {
			msg[len] = 0;
		} else {
			msg[len] = '\n';
			msg[len+1]= 0;
		}
		if (DEBUG) eprintf("<<< len %d %s", len, msg);
		if (DEBUG_STDERR) fprintf(stderr, "<<< len %d %s", len, msg);
		return len;
	}


#ifdef SERIAL_MAIN_DEBUG
/*
#include <string.h>
#include <unistd.h>
#define STATS_INTERVAL	2
#include <errno.h>
#include <stdlib.h>


int main()
{
	//eprintf("start...\n");

	serial com;
	com.init();

	char* msg;
	//eprintf("point1\n");
	msg = (char*)malloc(80);

        int maxfd;
        struct timeval timeo;
        fd_set readfds, allreadfds;
        FD_ZERO(&allreadfds);
        FD_SET(com.getfd(), &allreadfds);
	//eprintf("point2\n");
//      if ( (maxfd=sockfd) < serialfd )
	 maxfd = com.getfd();
        
        timeo.tv_sec=STATS_INTERVAL;
        timeo.tv_usec=0;
	//eprintf("point3\n");
	strcpy(msg, ":0601\n");
	msg[5] = 13;
	msg[6] = 10;
	msg[7] = 0;
	//eprintf("sent %d chars\n", com.sendout(msg, strlen(msg)) );

        while (1) {
                readfds = allreadfds;
                switch ( select(maxfd+1, &readfds, NULL, NULL, &timeo) ) {
                        case 0: // timeout
                                //eprintf("waiting\n");
                                timeo.tv_sec=STATS_INTERVAL;
                                timeo.tv_usec=0;
                                break;
                        case -1: // error
				//eprintf("select error\n");
//                              if (errno != EINTR) { // EINTR is generated by sclient's SIGIO and is thus a normal error condition
//                                      mylog(LOG_ERR, "%s:%d  select error(%d): %s", __FILE__,__LINE__, errno, strerror(errno));
//                                      return -1;
//                              }
                        default:
                                if (FD_ISSET(com.getfd(), &readfds))
				{
					//eprintf("read %d chars\n", com.readin(msg, 80));
					//eprintf("received %s\n", msg);
				}
                } // eo switch
        } // eo main loop

	return(0);
}
*/

#endif

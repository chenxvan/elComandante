/**
    \mainpage elComandante documentation
    \tableofcontents
    \section introduction Introduction
    elComandante is a program that is used for the automatic testing of CMS pixel modules ...
    
    \section user User documentation
    
    \subsection installation Installation
    
    \subsection running Running elComandante
    
    \subsection conf Configuration
    \verbinclude elComandante.conf.default
    
    \subsection ini Initialization
    \verbinclude elComandante.ini.default
    
    \subsection modconf Module and testboard configuration
    \verbatim
    [Modules]
    TB0: M0696
    TB1: M1148
    TB2: M1148
    TB3: M3476
    
    [ModuleType]
    TB0: Roc
    TB1: Full
    TB2: Full
    TB3: Full
    
    [TestboardUse]
    TB0: False
    TB1: True
    TB2: False
    TB3: False
    \endverbatim
    
    \subsection env Environments
    An environment describes the (controllable) physical conditions at which a test with
    elComandante is performed. At this time there are only the temperature and x-ray radiation
    that can be supervised by elComandante and for this reason the definition of the enviromnents
    is completely given in the following example
    \verbatim
    [Environment Mo]
    Temperature: 17
    XrayVoltage: 60
    XrayCurrent: 30
    XrayTarget: Mo
    \endverbatim
    Here an environment with the label \c Mo is defined. It specifies a temperature of 17 degrees
    celsius, x-ray radiation with a tube setting of 60 kilovolts and 30 milliamperes. It also
    specifies an x-ray target for fluorescence, which is a label that should be defined among
    others in the \c elComandante.conf. The default settings are 17 degrees, 30 kV and 10 mA, no
    target (direct beam). Note that when no x-ray setting is specified in the environment, the
    x-ray device will not turn on (despite the default settings)! The defaults are just there
    such that you can leave away something, for instance the target.
    
    Environments can be added to tests in the test list:
    \verbatim
    Test: VcalCalibrationStep@Mo,VcalCalibrationStep@Ag,VcalCalibrationStep@Ba
    \endverbatim
    Every test is appended with an environment with an \c \@ character in between. In this example
    other environments that describe \c Ag and \c Ba are required (but omitted here for brevity).
    
    There is an alternative (easier, but more restrictive) way to specify environments. Instead
    of defining an environment like above one can simply write a floating point number after the
    \c \@ character which defines the temperature
    \verbatim
    Test: Pretest@17,Fulltest@17
    \endverbatim
    The environment and the \c \@ can also be omitted so it will default to 17 degrees Celsius.
    
    elComandante will try to establish the environment specified \a before the test is actually
    started, ensuring stable conditions for the test.
    
    \subsection testlists Test lists
    The tests that elComandante is supposed to run (in sequence) can be specified in a list.
    This list is to be put in \c elComandante.ini and in its most simple form would look like
    this:
    \verbatim
    [Tests]
    Test: Pretest,Fulltest,Trim,PHCalibration
    \endverbatim
    These tests (if defined) will then run in sequence once elComandante is started. The pixel
    modules/ROCs will get their parameters from a default parameters repository that can be
    specified in elComandante.con (see \ref conf).
    
    Tests can also be run in specific physical environments, where each test in the list gets
    a suffix in the form like \c Pretest@17. See \ref env for details.
    
    Sometimes it is desireable to use the module/ROC parameters from a previous test in the
    current test. This is especially the case if the previous test was the \c Pretest or
    \c Trim. To achieve this one can put an angular bracket (\c >) instead of a comman between
    tests:
    \verbatim
    Test: Pretest>Fulltest,Trim,PHCalibration
    \endverbatim
    In this example the \c Fulltest will get its parameters from the previously run \c Pretest.
    The \c Trim and \c PHCalibration tests will get the parameters from the default parameters
    repository (which is probably not desireable but mentioned here only as a (bad) example).
    If multiple tests require the parameters from the same previous test this can be specified
    as follows:
    \verbatim
    Test: Pretest>{Fulltest,Trim,PHCalibration}
    \endverbatim
    In this example all of the three \c Fulltest, \c Trim, and \c PHCalibration would get their
    parameters from the \c Pretest.
    
    It is also worth noting that these expressions with angular brackets (\c >) and curly brackets
    can be nested:
    \verbatim
    Test: Pretest>{Fulltest,Trim>{TrimVerification,PHCalibration}}
    \endverbatim
    Here the \c TrimVerification and the \c PHCalibration would get their parameters from \c Trim
    which in turn got its parameters from \c Pretest.
    
    \note It is not possible to have an angular bracket (\c >) after a closing curling bracket.
    Commas are still possible.
    \note Some of the tests mentioned in this section may not (yet) exist.
    
    \subsection tests Tests
    
    \subsubsection pretest Pretest
    
    \subsubsection fulltest Fulltest
    
    \subsubsection trimming Trimming
    
    \subsubsection phcal Pulse height calibration
    
    \subsubsection vcalcal Vcal calibration
    The Vcal calibration is somewhat special among the tests/calibrations that elComandante
    can perform. This is because some measurements require different environments (see \ref env)
    and therefore the calibration has to be split into multiple tests. There are two categories
    of tests in the Vcal calibration:
    
      - X-ray threshold scan
      - Vcal threshold scan
    
    The former must run at different x-ray conditions, namely monochromatic x-rays of different
    wavelengths/energies. This is achieved by using different targes in the x-ray beam. The
    nature and number of targets is configureable.
    
    Additionally there is the fact that all these tests must run with the same configuration
    of the module/ROC which (probably) was created or modified through another test such as
    \ref pretest or \ref trimming. To achieve this special considerations have to be made when
    setting the testlist in the initialization file:
    \verbatim
    Test: Pretest@17>Trim@17>{VcalCalibrationStep@Mo,VcalCalibrationStep@Ag,VcalCalibrationStep@Ba,VcalVsThreshold@17}
    \endverbatim
    In this example there are three X-ray threshold scans (the test name is \c VcalCalibrationStep)
    that are run in three different environments (\c Mo, \c Ag, \c Ba which stand for molybdenum,
    silver, and barium fluorescence targets). Before these scans are performed a \ref pretest and
    a \ref trimming step are executed. In the list they are not comma separated, but connected with an
    arrow (\c >) character. This means, that the test parameter files (such as DAC parameters or trim
    parameters) are taken from the previous test. The curly brackets mean that all tests listed within
    use test parameters from the test before the bracket. (Brackets can be nested.) After the
    \c VcalCalibrationSteps there is the VcalVsThreshold step which is a test that determines the
    \c Vcal DAC valuess that correspond to different \c VcThr (threshold) values.
    
    The different \ref env (\c Mo, \c Ag, \c Ba) can be defined in the initialization file as follows:
    \verbatim
    [Environment Mo]
    Temperature: 17
    XrayVoltage: 60
    XrayCurrent: 30
    XrayTarget: Mo
    \endverbatim
    In this example an environment label \c Mo is created that stands for a temperature of 17 degrees
    Celsius, a x-ray tube voltage and current of 60 kV and 30 mA respectively, as well as a fluorescence
    target with label \c Mo. The possible targets are defined in the \c elComandante.conf file. Here it
    is a coincidence (and convenience) that the environment label and the target label are the same.
    
    \subsubsection highrate High rate tests
    There are three high rate tests:
    
      - \c HighRatePixelMapTest
      - \c HighRateEfficiencyTest
      - \c HighRateSCurveTest
    
    They are separate (and not in one big test) because one may want to run them at different conditions
    (\ref env). For instance, one may want the \c HighRatePixelMapTest and the \c HighRateEfficiencyTest
    to be run at different x-ray intensities, but \c HighRateSCurveTest only at one (because it takes
    a much longer time). This could be listed in the test list like
    \verbatim
    Test: HighRatePixelMapTest@HR100,HighRateEfficiencyTest@HR100,HighRatePixelMapTest@HR250,HighRateEfficiencyTest@HR250,HighRateSCurveTest@HR250
    \endverbatim
    with \ref env like
    \verbatim
    [Environment HR100]
    Temperature: 17
    XrayVoltage: 30
    XrayCurrent: 10
    \endverbatim
    for testing at intensities of 100 MHz / cm2 and 250 MHz / cm2.
    
    \subsection testparams Changing test parameters
    \note This is not yet possible.
    
    \subsection ana Analyses
    Analyses are nothing but tests but instead of the \ref psiClient they address the \ref analysisClient.
    Because of this they can be added to the test list (see \ref testlists) like any other test:
    \verbatim
    Test: Pretest,Fulltest,FulltestAnalysis
    \endverbatim
    Analyses have to be declared in the \c elComandante.ini file:
    \verbatim
    [Analysis FulltestAnalysis]
    command: FulltestAnalysis --output analysis_Fulltest.root *Fulltest*/commander_Fulltest.root
    \endverbatim
    Analyses are nothing but information about how to run scripts on test results. The scripts can
    be anything from shell scripts to ROOT macros to compiled programs.
    \note At the moment it is not possible to tell the script the paths and filenames of the results
    from previously run tests. For this reason tricks have to be used such as the one shown above
    where the script will find some folder that has the name \c Fulltest in it.
    
    \note Another limitation is that the analysis does not get its own output directory (yet).
    
    The \ref analysisClient can be configured in \c elComandante.conf. It searches for scripts in the
    folder indicated with \c scriptDir in
    \verbatim
    [Directories]
    dataDir:   <!Directories|baseDir!>/DATA/
    scriptDir: <!Directories|baseDir!>/analysisClient/scripts/
    \endverbatim
    The scripts are executed in the directory \c dataDir which is the place where the test results
    are stored.
    
    \section devel Developer documentation
    
    \subsection newclient Creating a new client for elComandante
    
    \subsection newdevice Adding support for a new device
    Devices are handled by the clients, not by elComandante directly. Ideally the clients are written
    in such a way that the device dependent routines are easily exchangeable.
    
    \subsubsection newxraydevice Adding an x-ray device
    The \ref xrayClient is easily extendable with new devices. There are two different device types
    handlded by the \ref xrayClient:
      - x-ray generators
      - motor stages for moving fluorescence targets
    
    It has the abstract classes xray_generator.xray_generator and motor_stage.motor_stage which
    define the minimum features that the device has to support. The only thing to do is to create
    a new file with the class which will communicate with the new device. The new class has to
    inherit from one of the abstract classes mentioned before. The routines from the abstract
    classes then have to be redefined to do whatever is necessary to accomplish the functions.
    Please look at the abstract class documentation for xray_generator.xray_generator and
    motor_stage.motor_stage, as well as the specific implementation id3003.id3003_xray_generator
    and zaber.zaber_motor_stage for details about how to implement the new device.
    
    Secondly the new file has to be imported in the \c xrayClient.py file and another condition
    added to the code:
    \code
    if args.xray_type == "id3003":
        ## X-ray generator instance
        xray_generator = id3003.id3003_xray_generator(args.xray_device)
    elif args.xray_type == "newdevice":
        xray_generator = newdevice.newdevice(args.xray_device)
    else:
        error = "Unknown device " + args.xray_type + "."
        log.warning(error)
        sys.exit(1)
    \endcode
    
    Thirdly you have to adapt your \c elComandante.conf file to set the parameters of the xrayClient
    to your new values:
    \verbatim
    [xrayClient]
    xrayDevice: /dev/ttyF0
    xrayType: newdevice
    xrfDevice: /dev/ttyF1
    xrfType: zaber
    xrfTargets: Fe:0,Cu:25320,Mo:50640,Ag:75960,Sn:101280,Ba:126600
    \endverbatim
    In this example a new x-ray generator of type \c newdevice was added.
 */
